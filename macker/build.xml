<?xml version="1.0"?>

<project name="Macker" default="build" basedir=".">
    
    <!-- ================================================================= -->
    <!-- Properties                                                        -->
    <!-- ================================================================= -->
    
    <!-- Global -->
    
    <property name="Name"                 value="Macker" />
    <property name="name"                 value="macker" />
    
    <property name="src.dir"              location="${basedir}/src/java" />
    <property name="res.dir"              location="${basedir}/src/res" />
    <property name="lib.dir"              location="${basedir}/lib" />
    <property name="test.dir"             location="${basedir}/test" />
    <property name="doc.dir"              location="${basedir}/doc" />
    <property name="build.lib.dir"        location="${lib.dir}/build-only" />
    <property name="example.dir"          location="${doc.dir}/example" />
    
    <property file="${basedir}/build.properties" />
    
    <!-- Targets -->
    
    <property name="build.dir"            location="${basedir}/build/ant/" />
    <property name="build.classes.dir"    location="${build.dir}/classes" />
    <property name="build.test.dir"       location="${build.dir}/test" />
    <property name="dist.dir"             location="${build.dir}/dist" />
    
    <property name="jar.file"             location="${build.dir}/${name}.jar" />
    <property name="jar.manifest"         location="${basedir}/src/manifest.mf" />
    
    <property name="javadoc.dir"          location="${doc.dir}/javadoc"/>
    <property name="javadoc.packages"     value="net.innig.macker.*" />
    
    <property name="run.mainclass"        value="net.innig.macker.Macker" />
    <property name="run.args"             value="" />
    
    <!-- ================================================================= -->
    <!-- prepare:                                                          -->
    <!-- Sets up directories and such for compilation                      -->
    <!-- ================================================================= -->
    
    <target name="prepare">
        <mkdir dir="${build.dir}" />
        <mkdir dir="${build.classes.dir}" />
        <mkdir dir="${build.lib.dir}" /> <!-- because it's usually empty -->

        <path id="build.classpath">
            <fileset dir="${lib.dir}" includes="**/*.jar" />
            <fileset dir="${build.lib.dir}" includes="**/*.jar" />
        </path>
        <property name="build.classpath" refid="build.classpath" />
        
        <path id="run.classpath">
            <pathelement location="${build.classes.dir}" />
            <fileset dir="${lib.dir}" includes="**/*.jar" />
        </path>
        <property name="run.classpath" refid="run.classpath" />

        <path id="test.classpath">
            <pathelement location="${build.test.dir}" />
            <path refid="run.classpath" />
        </path>

        <tstamp><format property="timestamp" pattern="yyyy/MM/dd HH:mm:ss z" locale="en"/></tstamp>
        <condition property="dist.version.long" value="version ${dist.version}">
            <isset property="dist.version" />
        </condition>
        <property name="dist.version" value="nonrelease" />
        <property name="dist.version.long" value="non-release build [${timestamp}]" />
    </target>

    <!-- ================================================================= -->
    <!-- compile:                                                          -->
    <!-- Compiles the source code                                          -->
    <!-- ================================================================= -->

    <target name="compile"
        depends="prepare"
        description="Compiles the source code">

        <javac
            srcdir="${src.dir}"
            destdir="${build.classes.dir}"
            source="1.5"
            target="1.5"
            debug="true">
            <classpath refid="build.classpath" />
        </javac>
<!--
        <taskdef name="javamake"
            classname="com.sun.tools.javamake.ant.JavaMake"
            classpath="${build.classpath}" />

        <javamake
            srcdir="${src.dir}"
            destdir="${build.classes.dir}"
            pdbFilename="${build.dir}/${name}.pdb"
            source="1.5"
            target="1.5">
            <classpath refid="build.classpath" />
        </javamake>
-->

    </target>

    <!-- ================================================================= -->
    <!-- copy-resources:                                                   -->
    <!-- Copies resource files to the build directory                      -->
    <!-- ================================================================= -->

    <target name="copy-resources" 
        depends="prepare"
        description="Copies resource files to the build directory">
        
        <copy todir="${build.classes.dir}">
            <fileset dir="${res.dir}">
                <exclude name="**/*.properties"/>
            </fileset>
        </copy>
        
        <copy todir="${build.classes.dir}" overwrite="yes">
            <filterset>
                <filter token="dist.version"      value="${dist.version}"/>
                <filter token="dist.version.long" value="${dist.version.long}"/>
            </filterset>
            <fileset dir="${res.dir}">
                <include name="**/*.properties"/>
            </fileset>
        </copy>

    </target>

    <!-- ================================================================= -->
    <!-- build:                                                            -->
    <!-- The default target                                                -->
    <!-- ================================================================= -->

    <target name="build" 
        depends="jar,compile-tests"
        description="Builds an executable target (default)">

    </target>

    <!-- ================================================================= -->
    <!-- jar:                                                              -->
    <!-- Creates jar file                                                  -->
    <!-- ================================================================= -->
    
    <target name="jar" depends="compile,copy-resources" description="Creates a jar file">

        <delete file="${jar.file}"/>

        <jar 
            manifest="${jar.manifest}" 
            jarfile="${jar.file}" 
            compress="false">

            <fileset dir="${build.classes.dir}" />
        </jar>

    </target>

    <!-- ================================================================= -->
    <!-- run:                                                              -->
    <!-- Runs the darn thing                                               -->
    <!-- ================================================================= -->

    <target name="run" depends="build" description="Runs the darn thing">

        <java classname="${run.mainclass}" fork="yes">
            <arg line="${run.args}"/>
            <classpath refid="run.classpath" />
        </java>

    </target>

    <!-- ================================================================= -->
    <!-- test:                                                             -->
    <!-- Runs JUnit test suites                                            -->
    <!-- ================================================================= -->

    <target name="compile-tests"
        depends="jar">
        
        <mkdir dir="${build.test.dir}" />

        <javac
            srcdir="${test.dir}/java/"
            destdir="${build.test.dir}"
            source="1.5"
            target="1.5"
            debug="true">
            <classpath refid="test.classpath" />
        </javac>
<!--
        <javamake
            srcdir="${test.dir}"
            destdir="${build.test.dir}"
            pdbFilename="${build.dir}/${name}-test.pdb">
            <classpath refid="test.classpath" />
        </javamake>
-->
    </target>
    
    <target name="test"
        depends="compile-tests"
        description="Runs JUnit test suites">
        
        <property name="test.build.recording.dir" location="${build.test.dir}/recording-tests" />
        <delete dir="${test.build.recording.dir}" />
        <mkdir  dir="${test.build.recording.dir}" />
        
        <taskdef name="junit"
            classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"
            classpath="${test.junit.lib}"/>
        
        <junit
            printsummary="${junit.printsummary}"
            timeout="${junit.timeout}"
            showoutput="${junit.showoutput}"
            haltonerror="yes"
            haltonfailure="yes"
            fork="no">
            
            <formatter type="plain" usefile="no" />
            <classpath refid="test.classpath" />
            <sysproperty key="Macker.RecordingTest.testDir" value="${test.dir}/recording-tests" />
            <sysproperty key="Macker.RecordingTest.buildDir" value="${test.build.recording.dir}" />

            <batchtest>
                <fileset dir="${test.dir}/java/">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>

        </junit>
    	
    	<!-- We need some actual tests around the Ant task â€” but for now, just make sure it doesn't blow up! -->
    	<ant antfile="${test.dir}/ant-test/build.xml" target="go" inheritall="no"/>

    </target>

    <!-- ================================================================= -->
    <!-- javadoc:                                                          -->
    <!-- Generates javadoc                                                 -->
    <!-- ================================================================= -->

    <target
        name="javadoc"
        description="Builds javadoc"
        depends="prepare">
        
        <property name="javadoc.title" value="${Name} API ${dist.version.long}"/>
        <mkdir dir="${javadoc.dir}" />
        <javadoc sourcepath="${src.dir}"
            destdir="${javadoc.dir}"
            packagenames="${javadoc.packages}"
            public="true"
            windowtitle="${javadoc.title}" 
            use="true">
            <classpath refid="build.classpath" />
            <link href="http://java.sun.com/j2se/1.3/docs/api/" />
        </javadoc>
        <copy todir="${javadoc.dir}">
            <fileset dir="${src.dir}">
                <include name="**/*.gif"/>
                <include name="**/*.jpeg"/>
                <include name="**/*.jpg"/>
                <include name="**/*.png"/>
                <include name="**/*.pdf"/>
                <include name="**/*.svg"/>
            </fileset>
        </copy>
        
    </target>

    <!-- ================================================================= -->
    <!-- clean:                                                            -->
    <!-- Removes all build files                                           -->
    <!-- ================================================================= -->

    <target name="clean" description="Removes all build files">
        <delete dir="${javadoc.dir}" />
        <delete dir="${build.classes.dir}" />
        <delete dir="${build.dir}" />
        <delete dir="${dist.dir}" />
    </target>

    <!-- ================================================================= -->
    <!-- dist:                                                             -->
    <!-- Package distribution version                                      -->
    <!-- ================================================================= -->

    <target
		name="dist"
		depends="clean,test,javadoc"
    	description="Prepares distribution-ready archives (uses dist.version parameter)">
	
        <echo>Bundling dist: ${dist.version.long}</echo>
        <property name="dist.name" value="${name}-${dist.version}" />
        <property name="dist.file" value="${dist.dir}/${dist.name}" />
        
        <property name="dist.tmp.dir" value="${dist.dir}/tmp" />
        <property name="dist.staging.dir" value="${dist.tmp.dir}/${dist.name}" />
        <mkdir  dir="${dist.staging.dir}" />
        <copy todir="${dist.staging.dir}">
            <fileset dir="${basedir}">
                <include name="**" />
                <exclude name="build/**" />
                <exclude name="**/.DS_Store" />
            </fileset>
        </copy>
        <copy todir="${dist.staging.dir}">
            <fileset dir="${build.dir}" includes="${name}.jar" />
        </copy>
        <copy todir="${dist.staging.dir}" overwrite="yes">
            <filterset>
                <filter token="dist.version"      value="${dist.version}"/>
                <filter token="dist.version.long" value="${dist.version.long}"/>
            </filterset>
            <fileset dir="${basedir}" includes="README.html" />
        </copy>
        <tar basedir="${dist.tmp.dir}"
             destfile="${dist.file}.tar.gz"
             compression="gzip"
             longfile="gnu" />
        <zip basedir="${dist.tmp.dir}"
             destfile="${dist.file}.zip"
             filesonly="no" />
        <delete dir="${dist.tmp.dir}" />

    </target>
    
</project>
