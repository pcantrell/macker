VERSION HISTORY

version 0.4 (in development):
  remaning:
    - complete basic filters (including has-method and has-field)
    - add reference type filters for access rules
    - document new features
    - regression tests
  done:
    - added filter patterns
    - parsing for superclass, interfaces, access modifiers
    - parsing distinguishes different types of signature-level reference
    - ForEach now checks more than just the primary classes
    - severity levels allow rules to generate warnings instead of errors
    - Macker now uses BCEL for class parsing
    - Macker now forces validation against its internal DTD
    - verbose output shows classes in sorted order
    - running under Java 1.4 no longer generates "major version" warning messages

version 0.3.1:
    - added a few examples
    - fixed broken links in docs
    - fixed output omission in non-forked ant task

version 0.3:
    - Macker now detects API-only accesses of other classes
    - rulesets now support input class subsetting
    - access rules now support custom error messages
    - Ant task supports custom classpath without forking
    - vast performance improvements through better regex caching
    - much-improved API for calling Macker from Java
    - addReachableClasses supports dynamic primary class detection
    - Macker now won't stop after the first ruleset that fails
    - bug fix for vars containing other vars
    - added void to primitive types (now necessary b/c of API parsing)
    - numerous output formatting tweaks (getting readable!)

version 0.2:
    - Macker really works
    
version 0.1:
    - Macker sorta works

version 0.0:
    - Macker doesn't work

___________________________

LIKELY FUTURE FEATURES
(with wild guesses at version numbers)

0.4 filtering on attributes other than name
0.5 forall / exists rules
0.5 parsing of references inside methods
0.6 method patterns
0.7 standard for rules export in META-INF
?   more flexible foreach scoping
?   line numbers in output
?   better-structured event callbacks (for tool integration)
